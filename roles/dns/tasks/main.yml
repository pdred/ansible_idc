# roles/dns/tasks/main.yml
---
- name: Create DNS directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ ansible_user_home  }}/lab-infra/dns/config"
    - "{{ ansible_user_home  }}/lab-infra/dns/data"
    - "{{ ansible_user_home  }}/lab-infra/dns/src"
    - "{{ ansible_user_home  }}/lab-infra/dns/logs"

- name: Copy DNS Dockerfile
  ansible.builtin.template:
    src: "Dockerfile.j2"
    dest: "{{ ansible_user_home  }}/lab-infra/dns/src/Dockerfile"
    mode: '0644'

- name: Generate DNS configuration
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ ansible_user_home  }}/lab-infra/dns/config/{{ item.dest }}"
    mode: '0644'
  loop:
    - { src: 'named.conf.j2', dest: 'named.conf' }
    - { src: 'db.lab.com.j2', dest: 'db.lab.com' }
    - { src: 'db.10.168.192.j2', dest: 'db.10.168.192' }

- name: Configure logging in named.conf
  ansible.builtin.blockinfile:
    path: "{{ ansible_user_home  }}/lab-infra/dns/config/named.conf"
    marker: "// {mark} ANSIBLE MANAGED BLOCK - LOGGING"
    block: |
      logging {
          channel default_debug {
              file "/var/cache/bind/named.log" versions 3 size 5m;
              severity dynamic;
              print-time yes;
          };
      };
  when: dns_enable_logging | default(true)
  become: true

- name: Set SELinux context for DNS directories
  ansible.builtin.file:
    path: "{{ item }}"
    setype: container_file_t
    recurse: yes
  loop:
    - "{{ ansible_user_home  }}/lab-infra/dns/config"
    - "{{ ansible_user_home  }}/lab-infra/dns/data"
  when: ansible_selinux.status == "enabled"
  become: true

- name: Enable lingering for user
  ansible.builtin.command: loginctl enable-linger {{ ansible_user_uid }}
  become: true
  changed_when: false

- name: Configure podman with cgroupfs manager
  ansible.builtin.copy:
    dest: ~/.config/containers/containers.conf
    content: |
      [engine]
      cgroup_manager = "cgroupfs"
    mode: '0644'
  become: false

- name: Build DNS container
  ansible.builtin.shell: |
    mkdir -p ~/podman-tmp
    podman --root ~/podman-storage --runroot ~/podman-tmp --cgroup-manager=cgroupfs build -t {{ container_registry }}/dns-server ~/lab-infra/dns/src/
  register: build_result
  changed_when: true
  become: false

- name: Validate DNS configuration
  block:
    - name: Check named configuration
      ansible.builtin.shell: |
        mkdir -p ~/podman-tmp
        podman --root ~/podman-storage --runroot ~/podman-tmp run --rm -v ~/lab-infra/dns/config:/etc/bind:Z {{ container_registry }}/dns-server named-checkconf /etc/bind/named.conf
      register: named_conf_check
      changed_when: false
      failed_when: named_conf_check.rc != 0
      become: false

    - name: Check zone files
      ansible.builtin.command: "podman run --rm -v {{ ansible_user_home  }}/lab-infra/dns/config:/etc/bind:Z {{ container_registry }}/dns-server named-checkzone {{ item.zone }} /etc/bind/{{ item.file }}"
      loop:
        - { zone: "lab.com", file: "db.lab.com" }
        - { zone: "10.168.192.in-addr.arpa", file: "db.10.168.192" }
      changed_when: false

- name: Stop existing DNS container
  containers.podman.podman_container:
    name: dns-server
    state: absent
  register: container_stop
  failed_when:
    - container_stop.failed is defined
    - container_stop.failed
    - '"not found" not in container_stop.msg'

- name: Create DNS container
  containers.podman.podman_container:
    name: dns-server
    image: "{{ container_registry }}/dns-server"
    state: started
    restart_policy: always
    volumes:
      - "{{ ansible_user_home }}/lab-infra/dns/config:/etc/bind:Z"
      - "{{ ansible_user_home }}/lab-infra/dns/data:/var/lib/bind:Z"
      - "{{ ansible_user_home }}/lab-infra/dns/logs:/var/log/named:Z"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
  become: false

- name: Create DNS systemd service directory
  ansible.builtin.file:
    path: "{{ systemd_user_dir }}"
    state: directory
    mode: '0755'

- name: Template DNS systemd service
  ansible.builtin.template:
    src: "dns-server.service.j2"
    dest: "{{ systemd_user_dir }}/dns-server.service"
    mode: '0644'
  register: dns_service_file

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true
    scope: user
  when: dns_service_file.changed

- name: Enable and start DNS service
  ansible.builtin.systemd:
    name: dns-server
    state: started
    enabled: true
    scope: user

- name: Configure firewall for DNS
  ansible.posix.firewalld:
    service: dns
    permanent: true
    state: enabled
  become: true
  notify: "Reload firewall"

- name: Wait for DNS service to be ready
  ansible.builtin.wait_for:
    host: "{{ dns_server_ip }}"
    port: 53
    timeout: 30

- name: Verify DNS resolution
  ansible.builtin.command: "dig @{{ dns_server_ip }} infra.{{ base_domain }}"
  changed_when: false
  register: dns_test
  until: dns_test.rc == 0
  retries: 3
  delay: 5
