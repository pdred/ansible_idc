# roles/dns/tasks/main.yml
---
# roles/dns/tasks/main.yml
---
- name: Create DNS directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "~/lab-infra/dns/config"
    - "~/lab-infra/dns/data"
    - "~/lab-infra/dns/src"
    - "~/lab-infra/dns/logs"
  become: false

- name: Copy DNS Dockerfile
  ansible.builtin.template:
    src: "Dockerfile.j2"
    dest: "~/lab-infra/dns/src/Dockerfile"
    mode: '0644'
  become: false

- name: Generate DNS configuration
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "~/lab-infra/dns/config/{{ item.dest }}"
    mode: '0644'
  loop:
    - { src: 'named.conf.j2', dest: 'named.conf' }
    - { src: 'db.lab.com.j2', dest: 'db.lab.com' }
    - { src: 'db.10.168.192.j2', dest: 'db.10.168.192' }
  become: false

- name: Configure logging in named.conf
  ansible.builtin.template:
    src: "named-logging.conf.j2"
    dest: "~/lab-infra/dns/config/named-logging.conf"
    mode: '0644'
  become: false

- name: Create podman directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "~/podman-storage"
    - "~/podman-tmp"
  become: false

- name: Build DNS container
  ansible.builtin.shell: |
    mkdir -p ~/podman-tmp
    podman --root ~/podman-storage --runroot ~/podman-tmp build -t {{ container_registry }}/dns-server ~/lab-infra/dns/src/
  register: build_result
  changed_when: true
  become: false

- name: Check named configuration
  ansible.builtin.shell: |
    mkdir -p ~/podman-tmp
    podman --root ~/podman-storage --runroot ~/podman-tmp run --rm -v ~/lab-infra/dns/config:/etc/bind:Z {{ container_registry }}/dns-server named-checkconf /etc/bind/named.conf
  register: named_conf_check
  changed_when: false
  failed_when: named_conf_check.rc != 0
  become: false

- name: Check zone files
  ansible.builtin.shell: |
    mkdir -p ~/podman-tmp
    podman --root ~/podman-storage --runroot ~/podman-tmp run --rm -v ~/lab-infra/dns/config:/etc/bind:Z {{ container_registry }}/dns-server named-checkzone {{ item.zone }} /etc/bind/{{ item.file }}
  loop:
    - { zone: 'lab.com', file: 'db.lab.com' }
    - { zone: '10.168.192.in-addr.arpa', file: 'db.10.168.192' }
  register: zone_check
  changed_when: false
  failed_when: zone_check.rc != 0
  become: false

- name: Stop existing DNS container
  ansible.builtin.shell: |
    mkdir -p ~/podman-tmp
    podman --root ~/podman-storage --runroot ~/podman-tmp rm -f dns-server || true
  register: container_stop
  changed_when: "'Deleted' in container_stop.stdout"
  failed_when: false
  become: false

- name: Create DNS container
  ansible.builtin.shell: |
    mkdir -p ~/podman-tmp
    podman --root ~/podman-storage --runroot ~/podman-tmp run -d --name dns-server \
      -v {{ ansible_user_home }}/lab-infra/dns/config:/etc/bind:Z \
      -v {{ ansible_user_home }}/lab-infra/dns/data:/var/lib/bind:Z \
      -v {{ ansible_user_home }}/lab-infra/dns/logs:/var/log/named:Z \
      -p 53:53/tcp -p 53:53/udp \
      {{ container_registry }}/dns-server
  register: container_create
  changed_when: true
  become: false

- name: Create DNS systemd service directory
  ansible.builtin.file:
    path: "{{ systemd_user_dir }}"
    state: directory
    mode: '0755'
  become: false

- name: Template DNS systemd service
  ansible.builtin.template:
    src: "dns-server.service.j2"
    dest: "{{ systemd_user_dir }}/dns-server.service"
    mode: '0644'
  register: dns_service_file
  become: false

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true
    scope: user
  when: dns_service_file.changed
  become: false

- name: Enable and start DNS service
  ansible.builtin.systemd:
    name: dns-server
    state: started
    enabled: true
    scope: user
  become: false

- name: Configure firewall for DNS
  ansible.posix.firewalld:
    service: dns
    permanent: true
    state: enabled
  become: true
  notify: "Reload firewall"

- name: Wait for DNS service to be ready
  ansible.builtin.wait_for:
    host: "{{ dns_server_ip }}"
    port: 53
    timeout: 30
  become: false

- name: Verify DNS resolution
  ansible.builtin.shell: |
    dig @{{ dns_server_ip }} infra.{{ base_domain }}
  register: dns_test
  changed_when: false
  failed_when: dns_test.rc != 0
  become: false
