# roles/dns/tasks/main.yml
---
- name: Create DNS directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "~/lab-infra/dns/config"
    - "~/lab-infra/dns/data"
    - "~/lab-infra/dns/src"

- name: Create DNS validation directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  become: true
  loop:
    - "/etc/bind"
    - "/var/lib/bind"
    - "/var/named/data"
    - "/var/named/dynamic"

- name: Set DNS directory permissions
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: '0755'
  become: true
  loop:
    - "/etc/bind"
    - "/var/lib/bind"

- name: Copy DNS Dockerfile
  ansible.builtin.template:
    src: "Dockerfile.j2"
    dest: "~/lab-infra/dns/src/Dockerfile"
    mode: '0644'

- name: Generate DNS configuration
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "~/lab-infra/dns/config/{{ item.dest }}"
    mode: '0644'
  loop:
    - { src: 'named.conf.j2', dest: 'named.conf' }
    - { src: 'db.lab.com.j2', dest: 'db.lab.com' }
    - { src: 'db.reverse.j2', dest: 'db.10.168.192' }

- name: Validate DNS configuration
  ansible.builtin.command: "named-checkconf ~/lab-infra/dns/config/named.conf"
  changed_when: false
  register: named_conf_check

- name: Validate forward zone
  ansible.builtin.command: "named-checkzone {{ base_domain }} ~/lab-infra/dns/config/db.lab.com"
  changed_when: false
  register: forward_zone_check

- name: Validate reverse zone
  ansible.builtin.command: "named-checkzone 10.168.192.in-addr.arpa ~/lab-infra/dns/config/db.10.168.192"
  changed_when: false
  register: reverse_zone_check

- name: Build DNS container
  containers.podman.podman_image:
    name: "{{ container_registry }}/dns-server"
    path: "~/lab-infra/dns/src"
    force: true
  register: dns_image_build

- name: Stop existing DNS container
  containers.podman.podman_container:
    name: dns-server
    state: absent
  register: container_stop
  failed_when:
    - container_stop.failed is defined
    - container_stop.failed
    - '"not found" not in container_stop.msg'

- name: Create DNS systemd service directory
  ansible.builtin.file:
    path: "{{ systemd_user_dir }}"
    state: directory
    mode: '0755'

- name: Template DNS systemd service
  ansible.builtin.template:
    src: "dns-server.service.j2"
    dest: "{{ systemd_user_dir }}/dns-server.service"
    mode: '0644'
  register: dns_service_file

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true
    scope: user
  when: dns_service_file.changed

- name: Enable and start DNS service
  ansible.builtin.systemd:
    name: dns-server
    state: started
    enabled: true
    scope: user

- name: Configure firewall for DNS
  ansible.posix.firewalld:
    service: dns
    permanent: true
    state: enabled
  become: true
  notify: "Reload firewall"

- name: Wait for DNS service to be ready
  ansible.builtin.wait_for:
    host: "{{ dns_server_ip }}"
    port: 53
    timeout: 30

- name: Verify DNS resolution
  ansible.builtin.command: "dig @{{ dns_server_ip }} infra.{{ base_domain }}"
  changed_when: false
  register: dns_test
  until: dns_test.rc == 0
  retries: 3
  delay: 5
